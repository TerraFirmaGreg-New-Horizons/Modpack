name: Build
run-name: Build #${{ github.run_number }} by @${{ github.actor }}

env:
  RELEASE_TYPE: "release"
  MC_VERSION: "1.12.2"

on:
  push:
    branches:
      - pakku
    # tags:
    #   - "*.*.*"

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  info:
    name: Project Info
    runs-on: ubuntu-latest

    outputs:
      project_version: ${{ steps.project_version.outputs.tag }}
      project_name: ${{ steps.project_name.outputs.value }}
      changelog: ${{ steps.changelog.outputs.description }}
      diff: ${{ steps.lockfile.outputs.diff }}
      release_type: ${{ env.RELEASE_TYPE }}
      mc_version: ${{ env.MC_VERSION }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Check lockfile
        shell: bash
        run: |
          set +e
          echo "üîé Getting modpack info..."

          if [ ! -f pakku-lock.json ]; then
            echo "::error::Could not find pakku-lock.json" && exit 1
          else
            echo "‚úîÔ∏è pakku-lock.json"
          fi

          if [ ! -f pakku.json ]; then
            echo "::error::Could not find pakku.json" && exit 1
          else
            echo "‚úîÔ∏è pakku.json"
          fi

      - name: Get previous lockfile
        id: lockfile
        shell: bash
        run: |
          set +e
          echo "üîé Getting previous lockfile..."
          if [ "$latest_tag" = ${{ github.ref_name }} ]; then
            latest_tag_prev=$(git describe --tags --abbrev=0 $(git describe --tags --abbrev=0)^)
            latest_tagged_commit=$(git rev-list -n 1 --pretty=format:"%h" $latest_tag_prev | sed -n 2p)

            if git cat-file -e $latest_tagged_commit:./pakku-lock.json; then
              git show $latest_tagged_commit:./pakku-lock.json > ./pakku-lock-prev.json
              java -jar ./pakku.jar diff -v --markdown PROJECTS_DIFF.md ./pakku-lock-pre.json ./pakku-lock.json 
            else
              echo "‚ùå File pakku-lock.json not found in previous tag"
            fi
          fi
          if [ ! -f PROJECTS_DIFF.md ]; then
            touch PROJECTS_DIFF.md
          fi
          {
            echo 'diff<<EOF'
            cat -v --show-nonprinting PROJECTS_DIFF.md
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Get Project Name
        id: project_name
        uses: ActionsTools/read-json-action@v1.0.5
        with:
          file_path: "pakku.json"
          prop_path: "name"

      - name: Get Project Version
        id: project_version
        uses: "WyriHaximus/github-action-get-previous-tag@v1.4.0"
        with:
          fallback: build.${{ github.run_number }}

      - name: Changelog Parser
        id: changelog
        uses: coditory/changelog-parser@v1.0.2
        with:
          path: CHANGELOG.md
          
      - name: Generate list using Markdown
        run: |
          echo "üìÉ Project Name=${{ steps.project_name.outputs.value }}" >> $GITHUB_STEP_SUMMARY
          echo "üìÉ Project Version=${{ steps.project_version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "üìÉ MC Versions=${{ env.MC_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "üìÉ Release Type=${{ env.RELEASE_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.changelog.outputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.lockfile.outputs.diff }}" >> $GITHUB_STEP_SUMMARY

  build-modpack:
    name: Build Modpack
    runs-on: ubuntu-latest
    needs: [info]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Replace strings
        shell: bash
        run: |
          set +e

          grooovy="./groovy/runConfig.json"
          cat <<< $(jq '.debug = false' $grooovy) > $grooovy
          sed -i -e "s/DEV/${{ needs.info.outputs.project_version }}/g" pakku.json

      - name: Cache pakku
        uses: actions/cache@v4.1.2
        with:
          path: build/.cache
          key: ${{ runner.OS }}-pakku-cache-${{ hashFiles('build/.cache/') }}
          restore-keys: |
            ${{ runner.OS }}-pakku-cache-

      - name: Export modpack
        run: |
          java -jar ./pakku.jar export

      - name: Rename artifact curseforge
        run: |
          cd ./build/curseforge/
          mv *.zip $(basename -s .zip *.zip)-curseforge.zip
          
      - name: Upload artifact CurseForge
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.project_version }}-curseforge
          path: ./build/curseforge/${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.project_version }}-curseforge.zip
          if-no-files-found: error

      - name: Rename artifact modrinth
        run: |
          cd ./build/modrinth/
          mv *.mrpack $(basename -s .mrpack *.mrpack)-modrinth.mrpack

      - name: Upload artifact modrinth
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.project_version }}-modrinth
          path: ./build/modrinth/${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.project_version }}-modrinth.mrpack
          if-no-files-found: warn

  build-server:
    name: Build Server Pack
    runs-on: ubuntu-latest
    needs: [info]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Replace strings
        shell: bash
        run: |
          set +e

          grooovy="./groovy/runConfig.json"
          cat <<< $(jq '.debug = false' $grooovy) > $grooovy
          sed -i -e "s/DEV/${{ needs.info.outputs.project_version }}/g" pakku.json

      - name: Cache pakku
        uses: actions/cache@v4.1.2
        with:
          path: build/.cache
          key: ${{ runner.OS }}-pakku-cache-${{ hashFiles('build/.cache/') }}
          restore-keys: |
            ${{ runner.OS }}-pakku-cache-

      - name: Export modpack
        run: |
          mv -vf ./.pakku/server-overrides/* ./
          java -jar ./pakku.jar export

      - name: Rename artifact server
        run: |
          cd ./build/serverpack/
          mv *.zip $(basename -s .zip *.zip)-serverpack.zip

      - name: Upload artifact server
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.project_version }}-serverpack
          path: ./build/serverpack/${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.project_version }}-serverpack.zip
          if-no-files-found: error

  build-multimc:
    name: Build MultiMC Pack
    runs-on: ubuntu-latest
    needs: [info]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Replace strings
        shell: bash
        run: |
          set +e

          grooovy="./groovy/runConfig.json"
          cat <<< $(jq '.debug = false' $grooovy) > $grooovy

      - name: Cache pakku
        uses: actions/cache@v4.1.2
        with:
          path: build/.cache
          key: ${{ runner.OS }}-pakku-cache-${{ hashFiles('build/.cache/') }}
          restore-keys: |
            ${{ runner.OS }}-pakku-cache-

      - name: Export
        run: |
          java -jar pakku.jar --debug fetch
          java -jar pakku.jar --debug export
          
      - name: Move files
        run: |
          ls
          mkdir -p .pakku/multimc-overrides/flame
          mv -vf ./build/.cache/curseforge/manifest.json .pakku/multimc-overrides/flame/manifest.json
          mv -vf ./build/.cache/curseforge/overrides .pakku/multimc-overrides/.minecraft
          mv -vf ./mods .pakku/multimc-overrides/.minecraft/mods
          cd .pakku/multimc-overrides/
          
          zip -r ${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.project_version }}-multimc.zip icon.png mmc-pack.json instance.cfg .minecraft/ flame/
      
      - name: Upload zip multimc
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.project_version }}-multimc
          path: .pakku/multimc-overrides/${{ needs.info.outputs.project_name }}-${{ needs.info.outputs.project_version }}-multimc.zip
          if-no-files-found: error

  release:
    name: Release
    needs: [info, build-modpack, build-server, build-multimc]
    uses: ./.github/workflows/release.yml
    with:
      project_name: ${{ needs.info.outputs.project_name }}
      project_version: ${{ needs.info.outputs.project_version }}
      release_type: ${{ needs.info.outputs.release_type }}
      mc_version: ${{ needs.info.outputs.mc_version }}
      changelog: ${{ needs.info.outputs.changelog }}
      diff: ${{ needs.info.outputs.diff }}
    secrets: inherit